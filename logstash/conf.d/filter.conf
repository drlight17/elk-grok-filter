if [type] == "mikrotik-audit" {
        grok {
            patterns_dir => "/etc/logstash/patterns/"
            match => [ "message", "%{MIKROTIKMSGS}" ]
            overwrite => [ "message" ]
        }
        date {
            match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601"  ]
        }
        if "_grokparsefailure" in [tags] {
            drop { }
        }
    }
else if [type] == "exim" {
          #if [message] =~ /^\[\d+(\\|\/|\\\\)\d+\]/ {
    #drop { }
  #}

    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_IN}" ]
    }
    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_OUT}" ]
    }
    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_COMPL}" ]
    }
    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_DEFER}" ]
    }
    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_FAIL}" ]
    }
    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_GREYLISTED}" ]
    }
    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_SPAM}" ]
    }
    grok {
        patterns_dir => "/etc/logstash/patterns/"
        match => [ "message", "%{EXIM_BOUNCE}" ]
    }
  
  geoip {
      source => "remote_host"
      target => "geoip"
      add_field => [ "location", "%{[geoip][latitude]},%{[geoip][longitude]}" ]
      
    }
  date {
    match => [ "timestamp", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601"  ]
  }
  mutate {
        convert => { "exim_msg_size" => "integer" }
  }
  mutate {
    add_field => { "exim_msg_state" => "not_defined" }
  }

  if [exim_flag] == "<=" {
    mutate {
      update => [ "exim_msg_state", "received" ]
    }
  } else if [exim_flag] == "=>" {
    mutate {
       update => [ "exim_msg_state", "delivered" ]
    }
  } else if [exim_flag] == "->" {
    mutate {
       update => [ "exim_msg_state", "delivered" ]
    }
  } else if [exim_flag] == ">>" {
    mutate {
       update => [ "exim_msg_state", "cutthrough_delivery" ]
    }
  } else if [exim_flag] == "*>" {
    mutate {
       update => [ "exim_msg_state", "suppressed_delivery" ]
    }
  } else if [exim_flag] == "==" {
    mutate {
       update => [ "exim_msg_state", "deferred" ]
    }
  } else if [exim_flag] == "**" {
    mutate {
       update => [ "exim_msg_state", "failed" ]
    }
  } else if "Completed" in [message] {
    mutate {
       update => [ "exim_msg_state", "completed" ]
    }
    } else if "temporarily rejected" in [message] {
    mutate {
       update => [ "exim_msg_state", "greylisted" ]
    }
    }
     else if [message] =~ /(rejected after DATA|rejected \(but fed to sa-learn\))/ {
    mutate {
       update => [ "exim_msg_state", "rejected_after_data" ]
    }
  } else if " rejected " in [message] {
    mutate {
       update => [ "exim_msg_state", "rejected_smtp_transaction" ]
    }
  }
  if [exim_msg_state] == "delivered" or [exim_msg_state] == "completed" {

    mutate {
      add_field => {"exim_qt" => 0}
    }

    if [exim_qt_s] {
      ruby {
             code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_s').to_i)"
           }
    }

    if [exim_qt_m] {
      ruby {
             code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_m').to_i*60)"
           }
    }

    if [exim_qt_h] {
      ruby {
             code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_h').to_i*3600)"
           }
    }

    if [exim_qt_d] {
      ruby {
             code => "event.set('exim_qt', event.get('exim_qt').to_i + event.get('exim_qt_d').to_i*86400)"
           }
    }

    mutate {
      remove_field => ["exim_qt_d", "exim_qt_h", "exim_qt_m", "exim_qt_s"]
    }
  }


if !("_grokparsefailure" in [tags]) {


   mutate {
        remove_field => ["message"]
    }
 } else {
    if [message] =~ /Message is frozen|Frozen \(delivery error message\)|(Start|End) queue run|retry time not reached|no (IP address|host name) found for (IP address|host)|unexpected disconnection while reading SMTP command|another process is handling this message|SSL verify error|TSL error on connection|TLS client disconnected|SSL_write|Connection (refused|timed out)/ {
     drop { }
    }
 }
